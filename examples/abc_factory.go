// Code generated by go-factory 1.0.2; DO NOT EDIT.

package examples

// FactoryC is a helper factory to ease creating data of type C
type FactoryC struct {
	Factory C
}

func NewFactoryC() *FactoryC {
	return &FactoryC{}
}

func (f *FactoryC) WithA(value *A) *FactoryC {
	f.Factory.A = value
	return f
}

func (f *FactoryC) WithB(value *B) *FactoryC {
	f.Factory.B = value
	return f
}

func (f *FactoryC) WithAs(values ...*A) *FactoryC {
	f.Factory.As = values
	return f
}

func (f *FactoryC) AddAs(values ...*A) *FactoryC {
	f.Factory.As = append(f.Factory.As, values...)
	return f
}

func (f *FactoryC) WithBs(values ...*B) *FactoryC {
	f.Factory.Bs = values
	return f
}

func (f *FactoryC) AddBs(values ...*B) *FactoryC {
	f.Factory.Bs = append(f.Factory.Bs, values...)
	return f
}

func (f *FactoryC) Build() *C {
	return deepCopyC(&f.Factory)
}

func deepCopyC(src *C) *C {
	if src == nil {
		return nil
	}
	copyInstance := *src
	if src.A != nil {
		copyInstance.A = new(A)
		*copyInstance.A = *src.A
	}
	if src.B != nil {
		copyInstance.B = new(B)
		*copyInstance.B = *src.B
	}
	if src.As != nil {
		copyInstance.As = make([]*A, len(src.As))
		copy(copyInstance.As, src.As)
	}
	if src.Bs != nil {
		copyInstance.Bs = make([]*B, len(src.Bs))
		copy(copyInstance.Bs, src.Bs)
	}
	return &copyInstance
}