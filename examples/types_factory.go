// Code generated by go-factory 1.0.2; DO NOT EDIT.

package examples

// FactoryTypes is a helper factory to ease creating data of type Types
type FactoryTypes struct {
	Factory Types
}

func NewFactoryTypes() *FactoryTypes {
	return &FactoryTypes{}
}

func (f *FactoryTypes) WithBool(value bool) *FactoryTypes {
	f.Factory.Bool = value
	return f
}

func (f *FactoryTypes) WithString(value string) *FactoryTypes {
	f.Factory.String = value
	return f
}

func (f *FactoryTypes) WithInt(value int) *FactoryTypes {
	f.Factory.Int = value
	return f
}

func (f *FactoryTypes) WithInt8(value int8) *FactoryTypes {
	f.Factory.Int8 = value
	return f
}

func (f *FactoryTypes) WithInt16(value int16) *FactoryTypes {
	f.Factory.Int16 = value
	return f
}

func (f *FactoryTypes) WithInt32(value int32) *FactoryTypes {
	f.Factory.Int32 = value
	return f
}

func (f *FactoryTypes) WithInt64(value int64) *FactoryTypes {
	f.Factory.Int64 = value
	return f
}

func (f *FactoryTypes) WithUint(value uint) *FactoryTypes {
	f.Factory.Uint = value
	return f
}

func (f *FactoryTypes) WithUint8(value uint8) *FactoryTypes {
	f.Factory.Uint8 = value
	return f
}

func (f *FactoryTypes) WithUint16(value uint16) *FactoryTypes {
	f.Factory.Uint16 = value
	return f
}

func (f *FactoryTypes) WithUint32(value uint32) *FactoryTypes {
	f.Factory.Uint32 = value
	return f
}

func (f *FactoryTypes) WithUint64(value uint64) *FactoryTypes {
	f.Factory.Uint64 = value
	return f
}

func (f *FactoryTypes) WithUintptr(value uintptr) *FactoryTypes {
	f.Factory.Uintptr = value
	return f
}

func (f *FactoryTypes) WithUint8ptr(value uintptr) *FactoryTypes {
	f.Factory.Uint8ptr = value
	return f
}

func (f *FactoryTypes) WithUint16ptr(value uintptr) *FactoryTypes {
	f.Factory.Uint16ptr = value
	return f
}

func (f *FactoryTypes) WithUint32ptr(value uintptr) *FactoryTypes {
	f.Factory.Uint32ptr = value
	return f
}

func (f *FactoryTypes) WithUint64ptr(value uintptr) *FactoryTypes {
	f.Factory.Uint64ptr = value
	return f
}

func (f *FactoryTypes) WithFloat32(value float32) *FactoryTypes {
	f.Factory.Float32 = value
	return f
}

func (f *FactoryTypes) WithFloat64(value float64) *FactoryTypes {
	f.Factory.Float64 = value
	return f
}

func (f *FactoryTypes) WithComplex64(value complex64) *FactoryTypes {
	f.Factory.Complex64 = value
	return f
}

func (f *FactoryTypes) WithComplex128(value complex128) *FactoryTypes {
	f.Factory.Complex128 = value
	return f
}

func (f *FactoryTypes) WithByte(value byte) *FactoryTypes {
	f.Factory.Byte = value
	return f
}

func (f *FactoryTypes) WithRune(value rune) *FactoryTypes {
	f.Factory.Rune = value
	return f
}

func (f *FactoryTypes) WithBools(values ...bool) *FactoryTypes {
	f.Factory.Bools = values
	return f
}

func (f *FactoryTypes) AddBools(values ...bool) *FactoryTypes {
	f.Factory.Bools = append(f.Factory.Bools, values...)
	return f
}

func (f *FactoryTypes) WithStrings(values ...string) *FactoryTypes {
	f.Factory.Strings = values
	return f
}

func (f *FactoryTypes) AddStrings(values ...string) *FactoryTypes {
	f.Factory.Strings = append(f.Factory.Strings, values...)
	return f
}

func (f *FactoryTypes) WithInts(values ...int) *FactoryTypes {
	f.Factory.Ints = values
	return f
}

func (f *FactoryTypes) AddInts(values ...int) *FactoryTypes {
	f.Factory.Ints = append(f.Factory.Ints, values...)
	return f
}

func (f *FactoryTypes) WithInt8s(values ...int8) *FactoryTypes {
	f.Factory.Int8s = values
	return f
}

func (f *FactoryTypes) AddInt8s(values ...int8) *FactoryTypes {
	f.Factory.Int8s = append(f.Factory.Int8s, values...)
	return f
}

func (f *FactoryTypes) WithInt16s(values ...int16) *FactoryTypes {
	f.Factory.Int16s = values
	return f
}

func (f *FactoryTypes) AddInt16s(values ...int16) *FactoryTypes {
	f.Factory.Int16s = append(f.Factory.Int16s, values...)
	return f
}

func (f *FactoryTypes) WithInt32s(values ...int32) *FactoryTypes {
	f.Factory.Int32s = values
	return f
}

func (f *FactoryTypes) AddInt32s(values ...int32) *FactoryTypes {
	f.Factory.Int32s = append(f.Factory.Int32s, values...)
	return f
}

func (f *FactoryTypes) WithInt64s(values ...int64) *FactoryTypes {
	f.Factory.Int64s = values
	return f
}

func (f *FactoryTypes) AddInt64s(values ...int64) *FactoryTypes {
	f.Factory.Int64s = append(f.Factory.Int64s, values...)
	return f
}

func (f *FactoryTypes) WithUints(values ...uint) *FactoryTypes {
	f.Factory.Uints = values
	return f
}

func (f *FactoryTypes) AddUints(values ...uint) *FactoryTypes {
	f.Factory.Uints = append(f.Factory.Uints, values...)
	return f
}

func (f *FactoryTypes) WithUint8s(values ...uint8) *FactoryTypes {
	f.Factory.Uint8s = values
	return f
}

func (f *FactoryTypes) AddUint8s(values ...uint8) *FactoryTypes {
	f.Factory.Uint8s = append(f.Factory.Uint8s, values...)
	return f
}

func (f *FactoryTypes) WithUint16s(values ...uint16) *FactoryTypes {
	f.Factory.Uint16s = values
	return f
}

func (f *FactoryTypes) AddUint16s(values ...uint16) *FactoryTypes {
	f.Factory.Uint16s = append(f.Factory.Uint16s, values...)
	return f
}

func (f *FactoryTypes) WithUint32s(values ...uint32) *FactoryTypes {
	f.Factory.Uint32s = values
	return f
}

func (f *FactoryTypes) AddUint32s(values ...uint32) *FactoryTypes {
	f.Factory.Uint32s = append(f.Factory.Uint32s, values...)
	return f
}

func (f *FactoryTypes) WithUint64s(values ...uint64) *FactoryTypes {
	f.Factory.Uint64s = values
	return f
}

func (f *FactoryTypes) AddUint64s(values ...uint64) *FactoryTypes {
	f.Factory.Uint64s = append(f.Factory.Uint64s, values...)
	return f
}

func (f *FactoryTypes) WithUintptrs(values ...uintptr) *FactoryTypes {
	f.Factory.Uintptrs = values
	return f
}

func (f *FactoryTypes) AddUintptrs(values ...uintptr) *FactoryTypes {
	f.Factory.Uintptrs = append(f.Factory.Uintptrs, values...)
	return f
}

func (f *FactoryTypes) WithUint8ptrs(values ...uintptr) *FactoryTypes {
	f.Factory.Uint8ptrs = values
	return f
}

func (f *FactoryTypes) AddUint8ptrs(values ...uintptr) *FactoryTypes {
	f.Factory.Uint8ptrs = append(f.Factory.Uint8ptrs, values...)
	return f
}

func (f *FactoryTypes) WithUint16ptrs(values ...uintptr) *FactoryTypes {
	f.Factory.Uint16ptrs = values
	return f
}

func (f *FactoryTypes) AddUint16ptrs(values ...uintptr) *FactoryTypes {
	f.Factory.Uint16ptrs = append(f.Factory.Uint16ptrs, values...)
	return f
}

func (f *FactoryTypes) WithUint32ptrs(values ...uintptr) *FactoryTypes {
	f.Factory.Uint32ptrs = values
	return f
}

func (f *FactoryTypes) AddUint32ptrs(values ...uintptr) *FactoryTypes {
	f.Factory.Uint32ptrs = append(f.Factory.Uint32ptrs, values...)
	return f
}

func (f *FactoryTypes) WithUint64ptrs(values ...uintptr) *FactoryTypes {
	f.Factory.Uint64ptrs = values
	return f
}

func (f *FactoryTypes) AddUint64ptrs(values ...uintptr) *FactoryTypes {
	f.Factory.Uint64ptrs = append(f.Factory.Uint64ptrs, values...)
	return f
}

func (f *FactoryTypes) WithFloat32s(values ...float32) *FactoryTypes {
	f.Factory.Float32s = values
	return f
}

func (f *FactoryTypes) AddFloat32s(values ...float32) *FactoryTypes {
	f.Factory.Float32s = append(f.Factory.Float32s, values...)
	return f
}

func (f *FactoryTypes) WithFloat64s(values ...float64) *FactoryTypes {
	f.Factory.Float64s = values
	return f
}

func (f *FactoryTypes) AddFloat64s(values ...float64) *FactoryTypes {
	f.Factory.Float64s = append(f.Factory.Float64s, values...)
	return f
}

func (f *FactoryTypes) WithComplex64s(values ...complex64) *FactoryTypes {
	f.Factory.Complex64s = values
	return f
}

func (f *FactoryTypes) AddComplex64s(values ...complex64) *FactoryTypes {
	f.Factory.Complex64s = append(f.Factory.Complex64s, values...)
	return f
}

func (f *FactoryTypes) WithComplex128s(values ...complex128) *FactoryTypes {
	f.Factory.Complex128s = values
	return f
}

func (f *FactoryTypes) AddComplex128s(values ...complex128) *FactoryTypes {
	f.Factory.Complex128s = append(f.Factory.Complex128s, values...)
	return f
}

func (f *FactoryTypes) WithBytes(values ...byte) *FactoryTypes {
	f.Factory.Bytes = values
	return f
}

func (f *FactoryTypes) AddBytes(values ...byte) *FactoryTypes {
	f.Factory.Bytes = append(f.Factory.Bytes, values...)
	return f
}

func (f *FactoryTypes) WithRunes(values ...rune) *FactoryTypes {
	f.Factory.Runes = values
	return f
}

func (f *FactoryTypes) AddRunes(values ...rune) *FactoryTypes {
	f.Factory.Runes = append(f.Factory.Runes, values...)
	return f
}

func (f *FactoryTypes) Build() *Types {
	return deepCopyTypes(&f.Factory)
}

func deepCopyTypes(src *Types) *Types {
	if src == nil {
		return nil
	}
	copyInstance := *src
	if src.Bools != nil {
		copyInstance.Bools = make([]bool, len(src.Bools))
		copy(copyInstance.Bools, src.Bools)
	}
	if src.Strings != nil {
		copyInstance.Strings = make([]string, len(src.Strings))
		copy(copyInstance.Strings, src.Strings)
	}
	if src.Ints != nil {
		copyInstance.Ints = make([]int, len(src.Ints))
		copy(copyInstance.Ints, src.Ints)
	}
	if src.Int8s != nil {
		copyInstance.Int8s = make([]int8, len(src.Int8s))
		copy(copyInstance.Int8s, src.Int8s)
	}
	if src.Int16s != nil {
		copyInstance.Int16s = make([]int16, len(src.Int16s))
		copy(copyInstance.Int16s, src.Int16s)
	}
	if src.Int32s != nil {
		copyInstance.Int32s = make([]int32, len(src.Int32s))
		copy(copyInstance.Int32s, src.Int32s)
	}
	if src.Int64s != nil {
		copyInstance.Int64s = make([]int64, len(src.Int64s))
		copy(copyInstance.Int64s, src.Int64s)
	}
	if src.Uints != nil {
		copyInstance.Uints = make([]uint, len(src.Uints))
		copy(copyInstance.Uints, src.Uints)
	}
	if src.Uint8s != nil {
		copyInstance.Uint8s = make([]uint8, len(src.Uint8s))
		copy(copyInstance.Uint8s, src.Uint8s)
	}
	if src.Uint16s != nil {
		copyInstance.Uint16s = make([]uint16, len(src.Uint16s))
		copy(copyInstance.Uint16s, src.Uint16s)
	}
	if src.Uint32s != nil {
		copyInstance.Uint32s = make([]uint32, len(src.Uint32s))
		copy(copyInstance.Uint32s, src.Uint32s)
	}
	if src.Uint64s != nil {
		copyInstance.Uint64s = make([]uint64, len(src.Uint64s))
		copy(copyInstance.Uint64s, src.Uint64s)
	}
	if src.Uintptrs != nil {
		copyInstance.Uintptrs = make([]uintptr, len(src.Uintptrs))
		copy(copyInstance.Uintptrs, src.Uintptrs)
	}
	if src.Uint8ptrs != nil {
		copyInstance.Uint8ptrs = make([]uintptr, len(src.Uint8ptrs))
		copy(copyInstance.Uint8ptrs, src.Uint8ptrs)
	}
	if src.Uint16ptrs != nil {
		copyInstance.Uint16ptrs = make([]uintptr, len(src.Uint16ptrs))
		copy(copyInstance.Uint16ptrs, src.Uint16ptrs)
	}
	if src.Uint32ptrs != nil {
		copyInstance.Uint32ptrs = make([]uintptr, len(src.Uint32ptrs))
		copy(copyInstance.Uint32ptrs, src.Uint32ptrs)
	}
	if src.Uint64ptrs != nil {
		copyInstance.Uint64ptrs = make([]uintptr, len(src.Uint64ptrs))
		copy(copyInstance.Uint64ptrs, src.Uint64ptrs)
	}
	if src.Float32s != nil {
		copyInstance.Float32s = make([]float32, len(src.Float32s))
		copy(copyInstance.Float32s, src.Float32s)
	}
	if src.Float64s != nil {
		copyInstance.Float64s = make([]float64, len(src.Float64s))
		copy(copyInstance.Float64s, src.Float64s)
	}
	if src.Complex64s != nil {
		copyInstance.Complex64s = make([]complex64, len(src.Complex64s))
		copy(copyInstance.Complex64s, src.Complex64s)
	}
	if src.Complex128s != nil {
		copyInstance.Complex128s = make([]complex128, len(src.Complex128s))
		copy(copyInstance.Complex128s, src.Complex128s)
	}
	if src.Bytes != nil {
		copyInstance.Bytes = make([]byte, len(src.Bytes))
		copy(copyInstance.Bytes, src.Bytes)
	}
	if src.Runes != nil {
		copyInstance.Runes = make([]rune, len(src.Runes))
		copy(copyInstance.Runes, src.Runes)
	}
	return &copyInstance
}